{
	"name": "silver_df_clientes",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_sql_clientes",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "silver_sql_detalle_ventas",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silver_sql_clientes",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "select2"
				},
				{
					"name": "union1"
				},
				{
					"name": "sort2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          cst_id as string,",
				"          cst_key as string,",
				"          cst_firstname as string,",
				"          cst_lastname as string,",
				"          cst_marital_status as string,",
				"          cst_gndr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          sls_ord_num as integer,",
				"          sls_prd_key as string,",
				"          sls_cust_id as integer,",
				"          sls_order_dt as date,",
				"          sls_ship_dt as date,",
				"          sls_sales as integer,",
				"          sls_quantity as integer,",
				"          sls_price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 select(mapColumn(",
				"          cst_id,",
				"          cst_firstname,",
				"          cst_lastname,",
				"          cst_marital_status,",
				"          cst_gndr",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(cst_id = toInteger(cst_id),",
				"          cst_marital_status = trim(cst_marital_status),",
				"          cst_gndr = trim(cst_gndr)) ~> derivedColumn1",
				"derivedColumn1 filter(!isNull(cst_id) &&",
				"!isNull(cst_firstname) && cst_firstname != '' &&",
				"!isNull(cst_lastname) && cst_lastname != '' &&",
				"!isNull(cst_marital_status) && cst_marital_status != '' &&",
				"!isNull(cst_gndr) && cst_gndr != '') ~> filter1",
				"filter1 sort(asc(cst_id, true)) ~> sort1",
				"source2 select(mapColumn(",
				"          cst_id = sls_cust_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"sort1, select2 union(byName: true)~> union1",
				"union1 sort(asc(cst_firstname, true)) ~> sort2",
				"sort2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cst_id as integer,",
				"          cst_firstname as string,",
				"          cst_lastname as string,",
				"          cst_marital_status as string,",
				"          cst_gndr as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          cst_id = sls_cust_id,",
				"          cst_firstname,",
				"          cst_lastname,",
				"          cst_marital_status,",
				"          cst_gndr",
				"     )) ~> sink1"
			]
		}
	}
}